import pkg from '@supabase/supabase-js';
import type { Database } from "database.types";
// import type { Database } from "-client";
import type { communityPosts, communityComments } from "./schema"; // Assuming schema exports these table types

// Types from database.types.ts or generated by Drizzle
export type CommunityPostTable = Database['public']['Tables']['community_posts'];
export type CommunityPost = CommunityPostTable['Row'];
export type CommunityPostInsert = CommunityPostTable['Insert'];

export type CommunityCommentTable = Database['public']['Tables']['community_comments'];
export type CommunityComment = CommunityCommentTable['Row'];
export type CommunityCommentInsert = CommunityCommentTable['Insert'];


const COMMUNITY_POST_COLUMNS = `
  id,
  profile_id,
  title,
  content,
  category,
  created_at,
  updated_at
`;

// Define a type for the author's profile information
type AuthorProfile = Pick<Database['public']['Tables']['profiles']['Row'], 'username' | 'full_name' | 'avatar_url'>;


// We'll need profile information too, so let's define a type for post with author
export interface CommunityPostWithAuthor extends CommunityPost {
  author: AuthorProfile | null;
  comment_count: number;
}


const COMMUNITY_COMMENT_COLUMNS = `
  id,
  post_id,
  profile_id,
  content,
  created_at,
  updated_at
`;

export interface CommunityCommentWithAuthor extends CommunityComment {
  author: AuthorProfile | null;
}

export const POSTS_PER_PAGE = 10;

// == Community Posts ==

export const getCommunityPosts = async (
  client: pkg.SupabaseClient<Database>,
  { page = 1, category, searchQuery }: { page?: number; category?: string; searchQuery?: string }
): Promise<{ posts: CommunityPostWithAuthor[]; count: number }> => {
  const from = (page - 1) * POSTS_PER_PAGE;
  const to = from + POSTS_PER_PAGE - 1;

  let query = client
    .from("community_posts")
    .select(
      `
      ${COMMUNITY_POST_COLUMNS},
      author:profiles (
        username,
        full_name,
        avatar_url
      ),
      comment_count:community_comments(count)
    `,
      { count: "exact" }
    );
  
  if (category) {
    query = query.eq("category", category);
  }

  if (searchQuery && searchQuery.trim() !== '') {
    query = query.or(`title.ilike.%${searchQuery.trim()}%,content.ilike.%${searchQuery.trim()}%`);
  }
  
  query = query.order("created_at", { ascending: false });

  const { data, error, count } = await query
    .range(from, to);

  if (error) {
    console.error("Error fetching community posts:", error.message);
    throw new Error(error.message);
  }
  
  const posts = (data || []).map((post) => ({
    ...post,
    author: post.author as AuthorProfile | null,
    comment_count: (post.comment_count as unknown as [{ count: number }])?.[0]?.count ?? 0,
  }));

  return { posts, count: count ?? 0 };
};

export const getCommunityPostById = async (
  client: pkg.SupabaseClient<Database>,
  { postId }: { postId: string }
): Promise<CommunityPostWithAuthor | null> => {
  const { data, error } = await client
    .from("community_posts")
    .select(`
      ${COMMUNITY_POST_COLUMNS},
      author:profiles (
        username,
        full_name,
        avatar_url
      )
    `)
    .eq("id", postId)
    .single();

  if (error) {
    if (error.code === 'PGRST116') return null; // Not found
    console.error("Error fetching community post by ID:", error.message);
    throw new Error(error.message);
  }
  if (!data) return null;

  const postWithAuthor: CommunityPostWithAuthor = {
    ...(data as Omit<typeof data, 'author'>),
    author: data.author as AuthorProfile | null,
    comment_count: 0, // Not needed on detail page, but required by type
  };
  return postWithAuthor;
}


export const createCommunityPost = async (
  client: pkg.SupabaseClient<Database>,
  postData: CommunityPostInsert
): Promise<CommunityPost | null> => {
  const { data, error } = await client
    .from("community_posts")
    .insert(postData)
    .select(COMMUNITY_POST_COLUMNS)
    .single();

  if (error) {
    console.error("Error creating community post:", error.message);
    throw new Error(error.message);
  }
  return data;
}

export async function updateCommunityPost(
  client: pkg.SupabaseClient<Database>,
  { postId, profileId, updates }: { postId: string; profileId: string; updates: Partial<Omit<CommunityPostInsert, "id" | "profile_id" | "created_at">> }
): Promise<CommunityPost | null> {
  const { data, error } = await client
    .from("community_posts")
    .update(updates)
    .eq("id", postId)
    .eq("profile_id", profileId) // Ensure only owner can update
    .select(COMMUNITY_POST_COLUMNS)
    .single();

  if (error) {
    console.error("Error updating community post:", error.message);
    throw new Error(error.message);
  }
  return data;
}

export async function deleteCommunityPost(
  client: pkg.SupabaseClient<Database>,
  { postId, profileId }: { postId: string; profileId: string }
): Promise<boolean> {
  const { error } = await client
    .from("community_posts")
    .delete()
    .eq("id", postId)
    .eq("profile_id", profileId); // Ensure only owner can delete

  if (error) {
    console.error("Error deleting community post:", error.message);
    throw new Error(error.message);
  }
  return true;
}


// == Community Comments ==

export const getCommentsByPostId = async (
  client: pkg.SupabaseClient<Database>,
  { postId, limit = 20, offset = 0 }: { postId: string; limit?: number; offset?: number }
): Promise<CommunityCommentWithAuthor[]> => {
  const { data, error } = await client
    .from("community_comments")
    .select(`
      id,
      post_id,
      profile_id,
      content,
      created_at,
      updated_at,
      author:profiles (
        username,
        full_name,
        avatar_url
      )
    `)
    .eq("post_id", postId)
    .order("created_at", { ascending: true })
    .range(offset, offset + limit - 1);

  if (error) {
    console.error("Error fetching comments for post:", error.message);
    throw new Error(error.message);
  }
  return (data || []).map(comment => ({
    ...comment,
    author: comment.author as AuthorProfile | null,
  }));
}

export const createCommunityComment = async (
  client: pkg.SupabaseClient<Database>,
  commentData: CommunityCommentInsert
): Promise<CommunityComment | null> => {
  const { data, error } = await client
    .from("community_comments")
    .insert(commentData)
    .select(COMMUNITY_COMMENT_COLUMNS)
    .single();

  if (error) {
    console.error("Error creating community comment:", error.message);
    throw new Error(error.message);
  }
  return data;
}

export const deleteCommunityComment = async (
  client: pkg.SupabaseClient<Database>,
  { commentId, profileId }: { commentId: string; profileId: string }
): Promise<boolean> => {
  // Add logic to check if user is comment owner or post owner for deletion permissions
  const { error } = await client
    .from("community_comments")
    .delete()
    .eq("id", commentId)
    .eq("profile_id", profileId); // Ensure only comment owner can delete (or post owner - more complex query)

  if (error) {
    console.error("Error deleting community comment:", error.message);
    throw new Error(error.message);
  }
  return true;
} 